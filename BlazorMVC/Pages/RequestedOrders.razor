@page "/RequestedOrders"
@inject IPedidoImportacaoBusiness PedidoImportacaoBusiness
@inject RequestedOrdersState RequestedOrdersState
@inject UserManager<Usuario> _userManager

<AuthorizeView Context="Contexto">
    <h1>Import Orders by @Contexto.User.Identity.Name</h1>

    <div class="row">
        <div class="col-md-12">

            @if (RequestedOrdersState.Input == null)
            {
                <Loader />
            }
            else
            {
                <DxDataGrid Data="@RequestedOrdersState.Input" PageSize="10" ShowFilterRow="false">
                    <DxDataGridColumn Field="@nameof(PedidoImportacao.ID)" Caption="Order" SortOrder="DataGridColumnSortOrder.Descending" />
                    <DxDataGridColumn Field="@nameof(PedidoImportacao.PastaTemp)" Caption="Base" />
                    <DxDataGridColumn Field="@nameof(PedidoImportacao.OrderState)" Caption="State" />
                    <DxDataGridColumn Field="@nameof(PedidoImportacao.DataTermino)" Caption="End Date" />
                    <DxDataGridColumn>
                        <DisplayTemplate>
                            @{
                                var order = (context as PedidoImportacao);
                                <div class="btn-group">
                                    <a href="/LogOrders/@order.ID" class="btn btn-info dt-view"><i class="fab fa-searchengin"></i> Detail</a>
                                    @if (order.OrderState == OrderState.ToConfigurate)
                                    {
                                        <a href="/AdjustToImport/@order.ID" class="btn btn-warning dt-view"><i class="fas fa-wrench"></i> Configure Columns</a>
                                    }
                                </div>
                            }
                        </DisplayTemplate>
                    </DxDataGridColumn>
                </DxDataGrid>
            }
        </div>
    </div>
</AuthorizeView>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await UpdateOrderList();
    }

    private async Task UpdateOrderList()
    {
        var authState = await authenticationStateTask;
        var user = await _userManager.GetUserAsync(authState.User);
        RequestedOrdersState.Input = PedidoImportacaoBusiness.GetPedidoByUser(user).ToList();
    }

}
