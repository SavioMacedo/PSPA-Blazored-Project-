@inject IIndexBusiness IndexBusiness
@inject ModalSelectState ModalSelectState

<div class="simple-form">
    <fieldset>
        <legend>
            @ModalSelectState.IndexName <button type="button" @onclick="AddToSelect" class="btn bt-sm btn-primary btn-add-query"><i class="fas fa-plus-square"></i> Add</button>
            @if (ModalSelectState.Columns.Count > 0)
            {
                <select class="custom-select custom-select-sm" @bind="@ModalSelectState.SelectToAddSelect">
                    <option>Select a column to filter...</option>
                    @foreach (var column in ModalSelectState.Columns)
                    {
                        <option value="@column.Name">@column.Name</option>
                    }
                </select>
            }
        </legend>
        <ul class="list-group list-group-flush">
            @foreach (var select in ModalSelectState.SelectColumns)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div style="padding-right: 5px">@select</div>
                    &nbsp;
                    <span @onclick="(() => RemoveSelect(select))" style="cursor: pointer;" class="badge badge-danger badge-pill">X</span>
                </li>
            }
        </ul>
    </fieldset>
    <hr />
    <button @onclick="Cancel" type="button" class="btn btn-secondary">Close</button>
    <button @onclick="Save" type="button" class="btn btn-primary">Save changes</button>
</div>

@code {
    [CascadingParameter]
    public BlazoredModalInstance ModalInstance { get; set; }
    [CascadingParameter]
    public ModalParameters Parameters { get; set; }

    protected override void OnInitialized()
    {
        ModalSelectState.IndexName = Parameters.Get<string>("IndexName");
        ModalSelectState.Columns = IndexBusiness.Colunas(ModalSelectState.IndexName).ToList();
        base.OnInitialized();
    }

    public void AddToSelect()
    {
        var select = ModalSelectState.SelectToAddSelect;

        if (ModalSelectState.SelectColumns.Contains(select))
            return;

        ModalSelectState.SelectColumns.Add(select);
    }

    public void RemoveSelect(string select)
    {
        ModalSelectState.SelectColumns.Remove(select);
    }

    public void Cancel()
    {
        ModalInstance.Cancel();
    }

    public void Save()
    {
        ModalInstance.Close(ModalResult.Ok<IList<string>>(ModalSelectState.SelectColumns));
    }
}
